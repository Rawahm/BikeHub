namespace BikeHub.Data
-- Create CustomerInformation table:
CREATE TABLE CustomerInformation (
    StudentID INT PRIMARY KEY,
    FirstName VARCHAR(100),
    LastName VARCHAR(100),
    Email VARCHAR(150),
    CampusName VARCHAR(100),
    PhoneNumber VARCHAR(10),
    EmergencyContactName VARCHAR(100),
    EmergencyContactNum VARCHAR(10),
    TypeOfCustomer VARCHAR(100),
    TypeOfRider VARCHAR(100),
    TAndCAgreement BIT,
    EmailSubscription BIT
);


-- Craete a rental table 
CREATE TABLE Rental (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    StudentId INT NOT NULL, 
    Name NVARCHAR(MAX) NOT NULL,
    Email NVARCHAR(MAX) NOT NULL,
    BikeRented NVARCHAR(MAX) NOT NULL,
    DateRented DATETIME NOT NULL,
    LockRented NVARCHAR(MAX) NOT NULL,
    BasketRented NVARCHAR(MAX) NOT NULL,
    KeyRented NVARCHAR(MAX) NOT NULL,
    Lights NVARCHAR(MAX) NOT NULL,
    DueDate DATETIME NOT NULL,
    DateReturned DATETIME NULL,
    Duration INT NOT NULL,
    Amount DECIMAL(18, 2) NOT NULL,
    Paid BIT NOT NULL,
    PaymentDate DATETIME NULL,
    KMSRidden INT NOT NULL,
    MethodOfTravel NVARCHAR(MAX) NOT NULL,
    DaysLate INT NOT NULL,
    Banned BIT NOT NULL,
    Notes NVARCHAR(MAX) NOT NULL,
    FOREIGN KEY (StudentId) REFERENCES CustomerInformation(StudentID)
);

-- Craete Archive Customer:
CREATE TABLE ArchiveCustomer (
    ArchiveCustomerId INT IDENTITY(1,1) PRIMARY KEY,
    StudentId INT NOT NULL,
    FirstName VARCHAR(255) NOT NULL,
    LastName VARCHAR(255) NOT NULL,
    Email VARCHAR(255) NOT NULL,
    CampusName VARCHAR(255),
    PhoneNumber VARCHAR(20) NOT NULL,
    EmergencyContactName VARCHAR(255),
    EmergencyContactNum VARCHAR(20),
    TypeOfCustomer VARCHAR(50),
    TypeOfRider VARCHAR(50),
    TAndCAgreement BIT NOT NULL,
    EmailSubscription BIT NOT NULL,
    ArchivedOn DATETIME NOT NULL DEFAULT GETDATE()
);

-- Create Contact us messages 
CREATE TABLE ContactUsMessages (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(255) NOT NULL,
    Email NVARCHAR(255) NOT NULL,
    Message NVARCHAR(MAX) NOT NULL,
    SubmittedDate DATETIME DEFAULT GETDATE()
);


------------------------------------------------------------------------------------------------------
-- Create Inventory table
Use bikehubdb;
CREATE TABLE InventoryTable (
    ItemId INT PRIMARY KEY IDENTITY(1,1),
    ItemType NVARCHAR(100) NOT NULL,
    ItemNumber NVARCHAR(50) NOT NULL,
    Condition NVARCHAR(50) NOT NULL,
    Price DECIMAL(18,2) NOT NULL,
    AvailabilityStatus NVARCHAR(50) NOT NULL,
    Comments NVARCHAR(500)
);
select * from InventoryTable;

ALTER TABLE InventoryTable
ADD RetiredOptions VARCHAR(255) NULL;
ALTER TABLE InventoryTable ALTER COLUMN RetiredOptions VARCHAR(255) NULL;



-------------------------------------------------------
-- Create Archived Inventory
CREATE TABLE ArchivedInventory(
    ArchivedItemId INT PRIMARY KEY IDENTITY(1,1),  
    ItemId INT NOT NULL,                           
    ItemType VARCHAR(50) NOT NULL,                 
    ItemNumber VARCHAR(50) NOT NULL,               
    Condition VARCHAR(50) NOT NULL,                
    Price DECIMAL(10, 2) NOT NULL,                 
    AvailabilityStatus VARCHAR(20) NOT NULL,       
    Comments VARCHAR(255),        
	RetiredOptions VARCHAR(100),
    ArchivedDate DATETIME2 DEFAULT GETDATE()        
);



------------------------------------------------------------------------
-- User and admin authentication tables:
-- 1- Create AspNetUsers
CREATE TABLE AspNetUsers (
    Id NVARCHAR(450) NOT NULL PRIMARY KEY,
    UserName NVARCHAR(256) UNIQUE,
    NormalizedUserName NVARCHAR(256),
    Email NVARCHAR(256),
    NormalizedEmail NVARCHAR(256),
    EmailConfirmed BIT NOT NULL DEFAULT (0),
    PasswordHash NVARCHAR(MAX),
    SecurityStamp NVARCHAR(MAX),
    ConcurrencyStamp NVARCHAR(MAX),
    PhoneNumber NVARCHAR(MAX),
    PhoneNumberConfirmed BIT NOT NULL DEFAULT (0),
    TwoFactorEnabled BIT NOT NULL DEFAULT (0),
    LockoutEnd DATETIMEOFFSET,
    LockoutEnabled BIT NOT NULL DEFAULT (1),
    AccessFailedCount INT NOT NULL DEFAULT (0)
);



*******************************************************
--2-  Create AspNetRoles
CREATE TABLE AspNetRoles (
    Id NVARCHAR(450) NOT NULL PRIMARY KEY,
    Name NVARCHAR(256) UNIQUE,
    NormalizedName NVARCHAR(256),
    ConcurrencyStamp NVARCHAR(MAX)
);

************************************************************
--3-  Create AspNetUserRoles
CREATE TABLE AspNetUserRoles (
    UserId NVARCHAR(450) NOT NULL,
    RoleId NVARCHAR(450) NOT NULL,
    PRIMARY KEY (UserId, RoleId),
    FOREIGN KEY (UserId) REFERENCES AspNetUsers(Id) ON DELETE CASCADE,
    FOREIGN KEY (RoleId) REFERENCES AspNetRoles(Id) ON DELETE CASCADE
);
****************************************************************
-- 4- Create AspNetUserClaims

CREATE TABLE AspNetUserClaims (
    Id INT NOT NULL PRIMARY KEY IDENTITY,
    UserId NVARCHAR(450) NOT NULL,
    ClaimType NVARCHAR(MAX),
    ClaimValue NVARCHAR(MAX),
    FOREIGN KEY (UserId) REFERENCES AspNetUsers(Id) ON DELETE CASCADE
);
**********************************************************************

-- 5- Create AspNetUserLogins
CREATE TABLE AspNetUserLogins (
    LoginProvider NVARCHAR(128) NOT NULL,
    ProviderKey NVARCHAR(128) NOT NULL,
    ProviderDisplayName NVARCHAR(256),
    UserId NVARCHAR(450) NOT NULL,
    PRIMARY KEY (LoginProvider, ProviderKey),
    FOREIGN KEY (UserId) REFERENCES AspNetUsers(Id) ON DELETE CASCADE
);
**********************************************************************

--6 - Create AspNetRoleClaims
CREATE TABLE AspNetRoleClaims (
    Id INT NOT NULL PRIMARY KEY IDENTITY,
    RoleId NVARCHAR(450) NOT NULL,
    ClaimType NVARCHAR(MAX),
    ClaimValue NVARCHAR(MAX),
    FOREIGN KEY (RoleId) REFERENCES AspNetRoles(Id) ON DELETE CASCADE
);
****************************************
-- Optional step: insert data to the AspNetRoles table::
INSERT INTO AspNetRoles (Id, Name, NormalizedName)
VALUES (NEWID(), 'Admin', 'ADMIN'),
       (NEWID(), 'User', 'USER');
